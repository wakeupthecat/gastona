/*
   //(o) gastonaDoc_source javaj_intro

   ========================================================================================
   ================ documentation for WelcomeGastona.gast =================================
   ========================================================================================

#gastonaDoc#

   <docType>    gastona
   <name>       " 4-Database with sqlite"
   <groupInfo>
   <javaClass>
   <importance> 2
   <desc>       //Database and sqlite

   <help>
      //
      // A very important added value in Gastona is the database and SQL ability which is
      // present in many widgets (javaj) and commands (listix). Internally Gastona is built using the
      // database engine sqlite (www.sqlite.org).
      //
      // Having integrated in the language a native SQL engine is especially powerful. An application
      // can use it whenever needed without worrying about external installations, starting/restarting
      // server services etc.. In other words, one just need to concentrate in the SQL language which
      // is actually the only thing that contributes to the functionality of an application.
      //
      // It allows of course, the development of typically database applications (e.g. master tables,
      // views and reports) but this is far away of being the only possibility.
      // Just to mention some more other benefits:
      //
      //   - It extends directly the script language (Listix) with the Standard Query Language (SQL).
      //     All sqlite core functions (length, trim, replace ...) as well as data and time functions
      //     (date, time, julianday ...) can be used within queries even if no database or real table
      //     are used
      //
      //       <today according to sqlite>
      //          LOOP, SQL,, //SELECT date('now') AS mydate
      //              ,, @<mydate>
      //
      //       (for more functions see sqlite documentation official site http://www.sqlite.org/lang.html)
      //
      //   - It permits using a entire database as "exchange format". For example some listix commands place
      //     complex or just huge results into a database using a predefined schema. This can be done
      //     on permanent, cache or just temporary databases as needed. By doing that the development
      //     flexibility is increased enormously, it is enough to know the database name and the schema
      //     to query the results in any desired way and as many times as wanted. See for example the
      //     listix commands SCAN, PARSONS, XMELON and JSON.
      //
      //   - The logic of many tasks even not related traditionally with databases can be solved using
      //     SQL (e.g. calculations, handling and comparison of lists, tables or even trees).
      //     Thinking in this kind of solution is not always easy (at least for me!).
      //     Even if designing and thinking in the algorithm solution may seem easier and sometimes straightforward
      //     compared to the SQL way, when it comes to its development it happens exactly the contrary, the algorithmic
      //     solution is much larger, error prone and remains inflexible while SQL uses few sentences that really compacts
      //     the logic being in the end a much cleaner and flexible solution.
      //
      // Examples of the last point, using SQL for the logic can be found in META-GASTONA\WelcomeGastona\WelcomeGastona.gast
      // which is the documentation and reference tool for Gastona, the logging mechanism used by Gastona and many others.
      // Maybe one good representative example that shows the power of the SQL approach versus the algorithm approach is the
      // sample called "simple compare dirs demo" (can be found in WelcomeGastona). It performs a comparison between two directories
      // in terms of file name, size and data (no content). All comparisons are done using just 6 SELECT statements! try to develop
      // the pure algorithmic way in any language to see the difference.
      //
      // Although mastering SQL is not something that can be learnt in "two days", it has to be definitely demystified. 
      // Very important SQL features like sorting, filtering and grouping making computations are actually very easy to understand 
      // and can be applied without a big effort.
      //
      // The combination sqlite + Gastona makes working with databases even easier, for instance creating a
      // table and querying it is made so trivially that one can think in using SQL even for little tasks like
      // sorting a small list etc.
      //
      //

   <examples>
      gastSample

      trivial sort
      sql sample
      simple logic sql 1
      simple logic sql 2
      simple compare dirs demo

   <trivial sort>
      //#javaj#
      //
      //    <frames> oConsol, "Trivial sort sample"
      //
      //#data#
      //
      //    <list_of_names>
      //       name
      //       Evarist
      //       Abel
      //       Silvia
      //       Beni
      //
      //#listix#
      //
      //    <main0>
      //       DATABASE,, CREATE TABLE, list_of_names
      //       //Sorted names :
      //       //
      //       LOOP, SQL,, //SELECT * FROM list_of_names ORDER BY name;
      //          ,, @<name>

   <sql sample>
      //#javaj#
      //
      //    <frames> Fmain, "SQL sample", 500, 400
      //
      //    <layout of Fmain>
      //       EVA, 10, 10, 7, 7
      //
      //       ---,      X           , X             , X
      //          , lEntire table
      //        X , tTable           ,  -            , -
      //          , lSorted names    , lFilter < 2000, lGroup cities
      //        X , iSort            , tFilter       , tGroup
      //
      //#data#
      //
      //    <myTable>
      //       city       , name      , amount
      //       Barcelona  , Cecilia   , 2390
      //       Barcelona  , Ramon     , 7400
      //       Lyon       , Evariste  , 1210
      //       Lyon       , Gaston    , 430
      //       Lyon       , Louise    , 1090
      //       Freiburg   , Renate    , 5630
      //       Goettingen , Karl      , 1330
      //       Goettingen , Andrea    , 36
      //
      //
      //    <tTable sqlSelect>   //SELECT * FROM myTable;
      //    <iSort sqlSelect>    //SELECT name FROM myTable ORDER BY name;
      //    <tFilter sqlSelect>  //SELECT name, amount FROM myTable WHERE amount+0 < 2000 ORDER BY amount+0;
      //    <tGroup sqlSelect>   //SELECT city, SUM(amount) AS total FROM myTable GROUP BY city ORDER BY total DESC;
      //
      //#listix#
      //
      //    <main0>
      //       DATABASE,, CREATE TABLE, myTable


   <simple logic sql 1>
      //#javaj#
      //
      //   <frames> F, Simple logic using sql 2, 300
      //
      //   <layout of F>
      //      EVA, 10, 10, 7, 7
      //
      //         , X
      //         , lAvailable items
      //       X , iAvailList
      //         , lRequested items
      //       X , iRequestList
      //
      //#data#
      //
      //   <iAvailList sqlSelect>    //SELECT * FROM tabItems EXCEPT SELECT * FROM tabRequested;
      //   <iRequestList sqlSelect>  //SELECT * FROM tabRequested;
      //
      //   <sampleData>
      //      desc
      //
      //      America
      //      Antarctica
      //      Africa
      //      Europe
      //      Asia
      //      Australia
      //
      //#listix#
      //
      //   <main0>
      //      DATABASE,, CREATE TABLE, tabItems , sampleData
      //      DATABASE,, EXECUTE, //CREATE TABLE tabRequested (desc);
      //
      //   <-- iAvailList>
      //      DB,, EXECUTE, //INSERT INTO tabRequested VALUES ('@<iAvailList selected.desc>');
      //      @<update lists>
      //
      //   <-- iRequestList>
      //      DB,, EXECUTE, //DELETE FROM tabRequested WHERE desc = '@<iRequestList selected.desc>';
      //      @<update lists>
      //
      //   <update lists>
      //      MSG, iAvailList data!
      //      MSG, iRequestList data!
      //
      //#**FIN EVA#

   <simple logic sql 2>
      //#javaj#
      //
      //   <frames> F, Simple logic implemented using SQL, 240
      //
      //   <layout of F>
      //      EVA, 10, 10, 7, 7
      //
      //         , X
      //         , lAvailable items
      //       X , iAvailList
      //         , buu
      //         , lRequested items
      //       X , iRequestList
      //
      //   <layout of buu>
      //      EVA, 4, 4, 8, 8
      //
      //         , X    , X
      //         , bAdd ,bRemove
      //
      //#data#
      //
      //   <bAdd>    " v Add    "
      //   <bRemove> " ^ Remove "
      //
      //   <iAvailList sqlSelect>    //SELECT * FROM tabItems EXCEPT SELECT * FROM tabRequested;
      //   <iRequestList sqlSelect>  //SELECT * FROM tabRequested;
      //
      //   <iAvailList visibleColumns>  desc
      //   <iRequestList visibleColumns>  desc
      //
      //   <sampleData>
      //      id, desc
      //
      //      01, First
      //      02, Second
      //      03, Third one
      //      50, etc ..
      //      99, Last Item
      //
      //#listix#
      //
      //   <main0>
      //      DATABASE,, CREATE TABLE, tabItems , sampleData
      //      DATABASE,, EXECUTE, //CREATE TABLE tabRequested (id, desc);
      //
      //   <update lists>
      //      MSG, iAvailList data!
      //      MSG, iRequestList data!
      //
      //   <-- bAdd>    @<add item>
      //   <-- bRemove> @<remove item>
      //
      //   <-- iAvailList 2>   @<add item>
      //   <-- iRequestList 2> @<remove item>
      //
      //   <add item>
      //      LOOP, EVA, iAvailList subTableSelection
      //          ,, @<db insert selected>
      //      @<update lists>
      //
      //   <remove item>
      //      LOOP, EVA, iRequestList subTableSelection
      //          ,, @<db remove selected>
      //      @<update lists>
      //
      //   <db insert selected>  DB,, EXECUTE, //INSERT INTO tabRequested VALUES ('@<id>', '@<desc>');
      //   <db remove selected>  DB,, EXECUTE, //DELETE FROM tabRequested WHERE id = '@<id>';
      //
      //#**#

   <simple compare dirs demo>
      //#javaj#
      //
      //   <frames>
      //         F, Compare Directories demo, 600, 600
      //
      //   <layout of F>
      //      EVA, 10, 10, 5, 5
      //
      //         ---, X                ,         , X
      //            , lLeft directory  ,         , lRight directory
      //            , eDirLeft         , bDirLeft, eDirRight         , bDirRight
      //            , bCompare         , -       , -                 , -
      //            , lOnly on the left, -       , lOnly on the right, -
      //          X , tOnlyLeft        , -       , tOnlyRight        , -
      //            , lSame in both    , -       , lDifferent        , -
      //          X , tSame            , -       , tDifferents       , -
      //
      //#data#
      //
      //   <bDirLeft DIALOG>  DIR
      //   <bDirRight DIALOG> DIR
      //   <bDirLeft>  "..."
      //   <bDirRight> "..."
      //
      //#listix#
      //
      //   <-- bDirLeft>
      //      -->, eDirLeft data!,, @<bDirLeft chosen>
      //
      //   <-- bDirRight>
      //      -->, eDirRight data!,, @<bDirRight chosen>
      //
      //   <-- bCompare>
      //      SCAN, REMOVE
      //          , PREFIX  , "left"
      //      SCAN, REMOVE
      //          , PREFIX  , "right"
      //      SCAN, ADDFILES, , @<eDirLeft>
      //          , PREFIX  , "left"
      //      SCAN, ADDFILES, , @<eDirRight>
      //          , PREFIX  , "right"
      //
      //      -->, tOnlyLeft data! , sqlSelect, //SELECT subPath FROM left_all EXCEPT SELECT subPath FROM right_all
      //      -->, tOnlyRight data!, sqlSelect, //SELECT subPath FROM right_all EXCEPT SELECT subPath FROM left_all
      //      -->, tSame data!, sqlSelect, //SELECT subPath FROM (@<IDENTIC FILES>)
      //      -->, tDifferents data!, sqlSelect, //SELECT subPath FROM (@<COMMON FILES>) EXCEPT SELECT subPath FROM (@<IDENTIC FILES>)
      //
      //   <IDENTIC FILES> //SELECT subPath, date, size FROM left_all INTERSECT SELECT subPath, date, size FROM right_all
      //   <COMMON FILES>  //SELECT subPath             FROM left_all INTERSECT SELECT subPath             FROM right_all
      //
      //#**#



#**FIN_EVA#

*/
