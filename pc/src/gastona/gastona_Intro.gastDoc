/*
   //(o) gastonaDoc_source javaj_intro

   ========================================================================================
   ================ documentation for WelcomeGastona.gast =================================
   ========================================================================================

#gastonaDoc#

   <docType>    gastona
   <name>       " 2-Introduction to Gastona"
   <groupInfo>
   <javaClass>
   <importance> 2
   <desc>       //Introduction to Gastona

   <help>
      //
      // Gastona is a scripting language, as such a whole application might written into a single text 
      // file using for that any text editor. It is still possible to develop or extend parts in java 
      // language easily but this documentation will focus mainly in the functionality just using scripting 
      // which provides a quite large and amazing functionality.
      //
      // Gastona, Javaj and Listix "story"
      // -----------------------------------
      //
      // The Gastona approach has not been designed from the begining at all, it is actually the result
      // of uniting two different "language-tools" that were developed separately and with totally
      // different purposes. One is "Javaj" designed for rapid development of GUI applications and
      // the second is "Listix" designed as a generic command line text generator. Interestingly, it
      // is also the fusion of two different worlds: The attractive User Interface world and the
      // "Black screen" command line world.
      //
      // If we take Gastona, Javaj and Listix as characters, this is the short story of their development:
      //
      // Javaj is a software arquitect specialized in User Interfaces having a box of smart widgets
      // that he places onto a frame in many possible ways (layouts). Once the widgets are shown, and
      // according to the Javaj philosophy, a java developer should develop java classes to control
      // the widgets (Javaj controllers).
      //
      // Listix is a command line program capable of doing very big jobs, calling other programs,
      // parsing files and generating his own results into text files. To instruct Listix what to do
      // there is a set of commands that Listix will execute efficiently. The only problem is that Listix
      // seems to be condemned to run always within a "black screen".
      //
      // Gastona knowing the ability of both decided making them to work together. On one side the many
      // times mechanical work of the Javaj controllers could be done easily by Listix and on the other
      // side many good and useful Listix scripts could have a nice face provided by Javaj, deriving thus
      // in a win-win relationship for both.
      //
      // Gastona Structure
      // --------------------------------
      //
      // The script is structured in four units : #gastona#, #javaj#, #listix# and #data#
      // Each unit is just a set of variables, each one can hold from a single string, list of string or tables
      // being able therefore of containing relative complex structures.
      //
      // The meaning of these variables depends entirely on the context and on who makes use of it.
      //
      // Briefly explained:
      //
      //  - #javaj# unit mainly contains all widgets to be used and how to place them in frames or windows
      //
      //  - #data# unit where Javaj widgets find its data, or better said its initial data
      //
      //  - #listix# unit together with #data# unit is where Listix find all "work to do"
      //
      //  - #gastona# has also an own unit, but less important for now
      //
      // It can be clearly seen a MVC pattern built in this structure. 
      // Where #data# plays the Model, #javaj# the View and #listix# the Control roles respectively.
      //
      // The relationship between M, V and C is explained with one example
      //
      //    - Javaj creates a button with label "Press me" and an edit field next to it (two widgets)
      //    - the edit field widget get its data from #data# 
      //    - when the user changes the field text, this emits a specific message
      //    - when the user presses the button, a specific message is emitted
      //    - listix can receive the message from the button and do stuff 
      //      like changing the data of the text in #data# and send a message for the widget to refresh the view
      //
      // and here the code that do this example
      //
      //    #javaj#
      //
      //       <frames> Fmain, "Basic sample app"
      //
      //       <layout of Fmain>
      //          PANEL, X
      //          bPress Me, eField
      //
      //    #data#
      //
      //       <eField> Default data
      //
      //    #listix#
      //
      //       <-- bPress Me>
      //          SET VAR, eField, "Hello Sample"
      //          MESSAGE, eField data!
      //
      // Running the sample would display a frame with a button labelled "Press Me" and a edit field
      // having the text "Default data", once the button is pressed the edit field will change its
      // content with "Hello Sample".
      //
      // Two more things to mention: 
      //
      //    - The #data# unit uses the blackboard principle, being public actually to all widgets and listix
      //
      //    - The messages from widgets and from listix to widgets are also public for everyone and
      //      follow a simple schema. For example a button named "bMyButton" send precisely the message "bMyButton" when clicked.
      //
      // Javaj and Listix are documented separately. 
      // For javaj we have a reference of javaj widgets (zWidgets) and for listix a reference of listix commands
      //
      // About layouts ...
      // All layouts in Javaj are intuitive and easy to use. Using the one called EVALAYOUT together
      // with the layout composition mechanism allows building very complex layouts using few lines.
      // Enabling the variable <PAINT LAYOUT> in the #gastona# unit might help on learning the layout
      // techniques.
      //
      // About Javaj widgets...
      // Many of them work in a very similar way and it should be enough to learn well a couple of them
      // to understand easily the rest.
      //
      // About Listix ...
      // Listix is definitively unconventional, its syntax and logic may look weird the first time 
      // it is seen because it is not similar to any script language at all. However there are actually 
      // just a couple of simple rules that together with the commands allows listix to do all the stuff.
      // Basic control of widgets using listix is easy and it is repeated in all samples, apart from that
      // there is many functionality provided by its commands. There are from low level commands like SET VAR
      // to very complex and powerful high level commands like MicoHTTP which is a HTTP server.
      //
      // Eva format
      // --------------------------------
      //
      // Finally, the format used for these units and variables is called EVA. I hope it is quite
      // intuitive and that it can be deduced from the many samples. You can find a more formal
      // documentation on "EvaFormatV1.1.pdf"(*) but maybe this few indications would be enough to
      // understand it:
      //
      // While reading line by line an Eva file, following rules apply
      //
      //    Leading and trailin spaces and tabs are trimmed
      //
      //    Empty lines as well as lines starting with <! or #! are ignored (comments)
      //
      //    #uuu# starts a unit named "uuu", the rest of the line is not used
      //
      //    <eee> starts an eva variable named "eee" within the current unit, the rest of the line MAY BE part of its content
      //
      //    An Eva variable can consist of 1 or more rows
      //
      //    Each row can contain more columns which are comma separated
      //
      //    If either // or ' are found at the beginning of a column, it indicates that all characters
      //    following this beginning are the contents of the column, and therefore it becomes the last
      //    column of the row
      //
      //    All columns of an Eva variable (except if last column with // or ') might be enclosed in
      //    quotation marks ("..."), but this is only strictly necessary if containing commas, blanks at
      //    the beginning or at the end, or a quotation mark which has to be expressed using two
      //    characters ("")
      //
      //    A unit starting with two asterisks (#**...#) is a "logical" end of the EVA file
      //
      //    (*) http://sourceforge.net/projects/evaformat/files/evaformat/Update_specification_v1.1/EvaFormatV1.1.pdf/download
      //


   <examples>
      gastSample
      simple gastona sample
      gastona demo app

   <simple gastona sample>
      //    #javaj#
      //
      //       <frames> Fmain, "Basic sample app"
      //
      //       <layout of Fmain>
      //          PANEL, X
      //          bPress Me, eField
      //
      //    #data#
      //
      //       <eField> Default data
      //
      //    #listix#
      //
      //       <-- bPress Me>
      //          -->, eField,, "Hello Sample"
      //

   <gastona demo app>
      //#javaj#
      //
      //   <frames> Fmain, "Gastona demo app"
      //
      //   <layout of Fmain>
      //      EVA, 10, 10, 5, 5
      //
      //      --- ,   A          ,    X
      //      A  , bDump cities ,  oBoard
      //      A  , bClean screen,    +
      //      X  , iList        ,    +
      //
      //#data#
      //
      //   <iList visibleColumns> name
      //
      //   <iList>
      //      name   ,  city
      //      Manuela, Barcelona
      //      Rita   , San Francisco
      //      Salomon, Busan
      //
      //
      //#listix#
      //
      //   <-- iList>
      //      //@<iList selected.name> lives in @<iList selected.city>
      //      //
      //
      //   <-- bDump cities>
      //      //cities :
      //      //
      //      LOOP, EVA, iList
      //          ,BODY, // @<city>
      //      //
      //      //
      //
      //   <-- bClean screen>
      //      MSG, oBoard clear
      //


#**FIN_EVA#

*/
